name: Deploy Docker container to EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download kubeconfig for EKS cluster
        run: |
          mkdir -p ~/.kube
          aws eks update-kubeconfig --region us-east-1 --name exam-dev --kubeconfig ~/.kube/config

      - name: Set up AWS credentials and update kubeconfig
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Debug - Print kubeconfig
        run: cat $HOME/.kube/config

      - name: Update kubeconfig for EKS cluster
        uses: aws-actions/configure-aws-credentials@v1
        with:
          eks-region: us-east-1
          eks-cluster-name: exam-dev
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push Docker image
        env:
          DOCKER_IMAGE: 590951457535.dkr.ecr.us-east-1.amazonaws.com/ef-test-k8s
        run: |
          docker build -t $DOCKER_IMAGE .
          docker tag $DOCKER_IMAGE $DOCKER_IMAGE
          docker push $DOCKER_IMAGE
      - name: Deploy to EKS cluster
        env:
          K8S_NAMESPACE: default
          K8S_DEPLOYMENT_NAME: docker-test
          K8S_SERVICE_NAME: docker-test
          DOCKER_IMAGE: 590951457535.dkr.ecr.us-east-1.amazonaws.com/ef-test-k8s
        run: |
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: $K8S_DEPLOYMENT_NAME
            labels:
              app: $K8S_DEPLOYMENT_NAME
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: $K8S_DEPLOYMENT_NAME
            template:
              metadata:
                labels:
                  app: $K8S_DEPLOYMENT_NAME
              spec:
                containers:
                  - name: $K8S_DEPLOYMENT_NAME
                    image: $DOCKER_IMAGE
                    ports:
                      - containerPort: 8080
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: $K8S_SERVICE_NAME
          spec:
            selector:
              app: $K8S_DEPLOYMENT_NAME
            ports:
              - protocol: TCP
                port: 8080
                targetPort: 8080
            type: LoadBalancer
          EOF
